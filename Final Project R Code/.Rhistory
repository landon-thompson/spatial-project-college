for(i in 1:n){ dat.temp[,,(m+i)] <- dat[,,i]}
Sn.star.temp <- kernel.vect.fun(dat.temp)
Sn.star <- Sn.star.temp[1:(choose((m+n),2)-choose(n,2))]
#Calculate New Covariance Matrix and Partition Covariance matrix
big.sig <- cond.P%*%t(cond.P)*results$sigma.a + diag(N)*results$sigma.e
sig.11 <- big.sig[1:(choose((m+n),2)-choose(n,2)),1:(choose((m+n),2)-choose(n,2))]
sig.12 <- big.sig[1:(choose((m+n),2)-choose(n,2)), (dim(sig.11)[1]+1):dim(big.sig)[2]]
sig.21 <- big.sig[(dim(sig.11)[1]+1):dim(big.sig)[2],1:(choose((m+n),2)-choose(n,2))]
sig.22 <- big.sig[ (dim(sig.11)[1]+1):dim(big.sig)[2],(dim(sig.11)[1]+1):dim(big.sig)[2]]
#Partition mean vector
mu1 <- t(results$s.bar %*% rep(1,(choose((m+n),2)-(choose(n,2)))))
mu2 <- results$s.bar %*% rep(1,choose(n,2))
#Calculate conditional distribution of new observation
x <- sig.12 %*% solve(sig.22)
y <- as.matrix(t(results$Sn - mu2))
cond.mu <- mu1 - (x%*%y)
cond.sig <- sig.11 - (sig.12 %*% solve(sig.22)%*% sig.21)
library("mvtnorm", lib.loc="~/R/win-library/3.4")
dens.p.star <- dmvnorm(Sn.star,cond.mu,cond.sig)
return(dens.p.star)
}
predict.class <- function(dat.star,dat){
#FUNCTION TO PREDICT CLASS MEMBERSHIP
#INPUT: DATA to be classified, dat.star, and TRAINING DATA, dat.
#OUTPUT: Vector of predictions and a matrix of Bayes factors
N <- dim(dat)[4]
#Calculate conditional densities for each new observation
#Each column is a set of conditional densities for each new observation
dens.p.star <- matrix(0,N,13)
for(i in 1:13){
for(j in 1:N){
dens.p.star[j,i] <- cond.dist(dat.star[,,,i], dat[,,,j])
}
}
#Calculate Bayes factor for each class
predictors <- matrix(0,N,13)
for(j in 1:13){
for(i in 1:N){
predictors[i,j] <- dens.p.star[i,j]/sum(dens.p.star[,j])
}
}
#Choose the maximum for each prediction to classify
class.predict <-vector()
for(i in 1:13){
class.predict[i] <- which.max(predictors[,i])
}
results <- list("class.predict"=class.predict)
results
}
predict.class(dat.star,dat.temp)
x <- c(4,6,7,10,16,14,9,18,12)
mean(x)
sum((x[i]-mean(x))^2)
for(i in 1:9){sum((x[i]-mean(x))^2)}
for(i in 1:9){num <- sum((x[i]-mean(x))^2)}
num
var(x)
x[1]-mean(x)
x[1]-mean(x)
y <- vector(9)
y <- vector()
for(i in 1:9){y[i] = (x[i]-mean(x))^2}
y
sum(y)
178/9
178/8
n <- 9
x.mat <- as.matrix(x,ncol=3)
x.mat
x.mat <- as.matrix(x,,ncol=3)
x.mat
x.mat <- matrix(x,,ncol=3)
x.mat
x.mat <- matrix(x,,ncol=3,byrow=TRUE)
x.mat
S <- sum(y)
S
library(spdep)
W <- mat2list2(x.mat)
install.packages("spdep")
W <- mat2listw(x.mat)
W
W <- matrix(0,3,3)
W <- matrix(0,9,9)
W[1,] <- c(0,1,0,1,0,0,0,0,0,0)
W[1,] <- c(0,1,0,1,0,0,0,0,0)
W[2,] <- c(1,0,1,0,1,0,0,0,0)
W[3,] <- c(0,1,0,0,0,1,0,0,0)
W
W[4,] <- c(1,0,0,0,1,0,0,0,0)
W[5,] <- c(0,1,0,1,0,1,0,1,0)
W[6,] <- c(0,0,1,0,1,0,0,0,1)
W[7,] <- c(0,0,0,1,0,0,0,1,0)
W[8,] <- c(0,0,0,0,1,0,1,0,1)
W[9,] <- c(0,0,0,0,0,1,0,1,0)
W
sum(W[,1])
for(i in 1:9){inn <- sum(W[,i])}
for(i in 1:9){S0 <- sum(inn[i])}
S0
inn
for(i in 1:9){inn[i] <- sum(W[,i])}
inn <- vector()
S0 <- vector()
for(i in 1:9){inn[i] <- sum(W[,i])}
inn
S0 <- sum(inn)
S0
n <- 9
#      sp
#      rgdal
#      maps
#      maptools
#      mapdata
#      xts
#      RColorBrewer
#
# Load package spacetime
#
library(spacetime)
#m package gstat
#
library(gstat)
data(wind)
# explore the wind data
head(wind)
str(wind)
library(sp)
wind.loc$y <- as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
wind.loc$x <- as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
coordinates(wind.loc) <- ~ x + y
proj4string(wind.loc) <- "+proj=longlat +datum=WGS84"
wind$time <- ISOdate(wind$year + 1900, wind$month, wind$day)
wind$jday <- as.numeric(format(wind$time, "%j"))
stations <- 4:15
windsqrt <- sqrt(0.5148 * as.matrix(wind[stations]))
Jday <- 1:366
daymeans <- sapply(split(windsqrt, wind$jday), mean)
meanwind <- lowess(daymeans ~ Jday, f = 0.1)$y[wind$jday]
velocities <- apply(windsqrt, 2, function(x) { x - meanwind })
wind.loc <- wind.loc[match(names(wind[4:15]), wind.loc$Code), ]
pts <- coordinates(wind.loc[match(names(wind[4:15]), wind.loc$Code), ])
rownames(pts) <- wind.loc$Station
pts <- SpatialPoints(pts, CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
wind.data <- stConstruct(velocities,
space = list(values = 1:ncol(velocities)), time = wind$time,
SpatialObj = pts)
class(wind.data)
library(maps)
library(maptools)
library(mapdata)
# the following code returns an error
m <- map2SpatialLines(map("worldHires", xlim = c(-11, -5.4),
ylim = c(51, 55.5), plot = T))
# see: https://www.rdocumentation.org/packages/maptools/versions/0.9-3/topics/map2SpatialPolygons
points(wind.data[,2],pch=3)
text(wind.data[,2],labels=row.names(wind.data@sp@coords),cex=.4,pos=1,col="red")
proj4string(m) <- "+proj=longlat +datum=WGS84"
m <- spTransform(m, utm29)
class(m)
utm29 <- CRS("+proj=utm +zone=29 +datum=WGS84")
m <- spTransform(m, utm29)
class(m)
plot(m)
grd <- SpatialPixels(SpatialPoints(makegrid(m, n = 300)),
proj4string = proj4string(m))
class(grd)
plot(grd)
wind.data <- wind.data[, "1961-04"]
n <- 10
library(xts)
tgrd <- seq(min(index(wind.data)), max(index(wind.data)), length = n)
pred.grd <- STF(grd, tgrd)
class(pred.grd)
plot(pred.grd)
v <- vgmST("separable", space = vgm(1, "Exp", 750000),
time = vgm(1, "Exp", 1.5 * 3600 * 24), sill=0.6)
wind.ST <- krigeST(values ~ 1, wind.data, pred.grd, v)
colnames(wind.ST@data) <- "sqrt_speed"
plot(wind.ST)
tgrd <- seq(min(index(wind.data)), max(index(wind.data)), length = n)
pred.grd <- STF(grd, tgrd)
class(pred.grd)
plot(pred.grd)
v <- vgmST("separable", space = vgm(1, "Exp", 750000),
time = vgm(1, "Exp", 1.5 * 3600 * 24), sill=0.6)
wind.ST <- krigeST(values ~ 1, wind.data, pred.grd, v)
library(xts)
head(wind.data)
library(xts)
ggplot(wind.data,aes(wind.data@time,wind.data@data))
install.packages("ggplot2")
library(ggplot2)
ggplot(wind.data,aes(wind.data@time,wind.data@data))
head(wind.data@data)
tail(wind.data@data)
as.matrix(wind.data@data,nrow=30)
as.matrix(wind.data@data,nrow=30,ncol=12)
head(wind)
class(wind.data)
wind.loc$y <- as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
data(wind)
# explore the wind data
head(wind)
str(wind)
library(sp)
wind.loc$y <- as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
wind.loc$x <- as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
coordinates(wind.loc) <- ~ x + y
proj4string(wind.loc) <- "+proj=longlat +datum=WGS84"
wind$time <- ISOdate(wind$year + 1900, wind$month, wind$day)
wind$jday <- as.numeric(format(wind$time, "%j"))
stations <- 4:15
windsqrt <- sqrt(0.5148 * as.matrix(wind[stations]))
Jday <- 1:366
daymeans <- sapply(split(windsqrt, wind$jday), mean)
meanwind <- lowess(daymeans ~ Jday, f = 0.1)$y[wind$jday]
velocities <- apply(windsqrt, 2, function(x) { x - meanwind })
wind.loc <- wind.loc[match(names(wind[4:15]), wind.loc$Code), ]
pts <- coordinates(wind.loc[match(names(wind[4:15]), wind.loc$Code), ])
rownames(pts) <- wind.loc$Station
library(rgdal)
utm29 <- CRS("+proj=utm +zone=29 +datum=WGS84")
pts <- spTransform(pts, utm29)
pts <- SpatialPoints(pts, CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
utm29 <- CRS("+proj=utm +zone=29 +datum=WGS84")
pts <- spTransform(pts, utm29)
wind.data <- stConstruct(velocities,
space = list(values = 1:ncol(velocities)), time = wind$time,
SpatialObj = pts)
class(wind.data)
ggplot(wind.data,aes(wind.data@time,wind.data@data$values))
library(tidyr)
library(dplyr)
head(wind)
head(wind.data)
wind.data <- stConstruct(velocities,
space = list(values = 1:ncol(velocities)), time = wind$time,
SpatialObj = pts)
class(wind.data)
#      sp
#      rgdal
#      maps
#      maptools
#      mapdata
#      xts
#      RColorBrewer
#
# Load package spacetime
#
library(spacetime)
#m package gstat
#
library(gstat)
data(wind)
# explore the wind data
head(wind)
str(wind)
library(sp)
wind.loc$y <- as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
wind.loc$x <- as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
coordinates(wind.loc) <- ~ x + y
proj4string(wind.loc) <- "+proj=longlat +datum=WGS84"
wind$time <- ISOdate(wind$year + 1900, wind$month, wind$day)
wind$jday <- as.numeric(format(wind$time, "%j"))
stations <- 4:15
windsqrt <- sqrt(0.5148 * as.matrix(wind[stations]))
Jday <- 1:366
daymeans <- sapply(split(windsqrt, wind$jday), mean)
meanwind <- lowess(daymeans ~ Jday, f = 0.1)$y[wind$jday]
velocities <- apply(windsqrt, 2, function(x) { x - meanwind })
wind.loc <- wind.loc[match(names(wind[4:15]), wind.loc$Code), ]
pts <- coordinates(wind.loc[match(names(wind[4:15]), wind.loc$Code), ])
rownames(pts) <- wind.loc$Station
pts <- SpatialPoints(pts, CRS("+proj=longlat +datum=WGS84"))
wind.data <- stConstruct(velocities,
space = list(values = 1:ncol(velocities)), time = wind$time,
SpatialObj = pts)
df <- wind.data %>%
select(wind.data@time, wind.data@data) %>%
gather(key="variable",value="value",-date)
library(tidyr)
df <- wind.data %>%
select.list(wind.data@time, wind.data@data) %>%
gather(key="variable",value="value",-date)
df <- wind.data %>%
select.list(wind.data@time, wind.data@data) %>%
gather(key="variable",value="value",-date)
head(economics)
df <- economics %>%
select(date,psavert,uempmed)%>% gather(key="variable", value="value", -date)
df <- economics %>%
select.list(date,psavert,uempmed)%>% gather(key="variable", value="value", -date)
df <- economics %>%
select.list(date,psavert,uempmed) %>%
gather(key="variable", value="value", -date)
df <- economics %>%
select.list(date,psavert,uempmed) %>%
gather(key="variable", value="value", -date)
library(tidyr)
df <- economics %>%
spread(date,psavert,uempmed) %>%
gather(key="variable", value="value", -date)
d)
df <- economics %>%
spread(date,psavert,uempmed) %>%
gather(key="variable", value="value", -date)
economics
df <- economics %>%
spread(date,psavert,uempmed) %>%
gather(key="variable", value="value", -date)
df <- economics %>%
spread(date,psavert,economics$uempmed) %>%
gather(key="variable", value="value", -date)
head(economics)
df <- economics %>% gather(key="variable", value="value")
df
library(dplyr)
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.4")
install.packages("dplyr")
library(dplyr)
df <- economics %>% select(date,psavert,uempmed)%>% gather(key="variable",value="value",-date)
head(df,3)
ggplot(df,aes(x=date,y=value))+geom_line(aes(color=variable),size=1)
head(wind.data)
class(economics)
df <- wind.data %>%
select(wind.data@time, wind.data@data) %>%
gather(key="variable",value="value",-date)
data(wind)
# explore the wind data
head(wind)
str(wind)
library(sp)
wind.loc$y <- as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
wind.loc$x <- as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
coordinates(wind.loc) <- ~ x + y
proj4string(wind.loc) <- "+proj=longlat +datum=WGS84"
wind$time <- ISOdate(wind$year + 1900, wind$month, wind$day)
wind$jday <- as.numeric(format(wind$time, "%j"))
stations <- 4:15
windsqrt <- sqrt(0.5148 * as.matrix(wind[stations]))
Jday <- 1:366
daymeans <- sapply(split(windsqrt, wind$jday), mean)
meanwind <- lowess(daymeans ~ Jday, f = 0.1)$y[wind$jday]
velocities <- apply(windsqrt, 2, function(x) { x - meanwind })
wind.loc <- wind.loc[match(names(wind[4:15]), wind.loc$Code), ]
pts <- coordinates(wind.loc[match(names(wind[4:15]), wind.loc$Code), ])
rownames(pts) <- wind.loc$Station
pts <- SpatialPoints(pts, CRS("+proj=longlat +datum=WGS84"))
library(rgdal)
wind.data <- stConstruct(velocities,
space = list(values = 1:ncol(velocities)), time = wind$time,
SpatialObj = pts)
class(wind.data)
library(maps)
library(maptools)
library(mapdata)
# the following code returns an error
m <- map2SpatialLines(map("worldHires", xlim = c(-11, -5.4),
ylim = c(51, 55.5), plot = T))
# see: https://www.rdocumentation.org/packages/maptools/versions/0.9-3/topics/map2SpatialPolygons
points(wind.data[,2],pch=3)
text(wind.data[,2],labels=row.names(wind.data@sp@coords),cex=.4,pos=1,col="red")
head(economics)
wind.frame <- data.frame(Time = rep(1:30, , each= 12), Values = wind.data@data$values, Station = station)
station <- rep(row.names(wind.data@sp),  30)
wind.frame <- data.frame(Time = rep(1:30, , each= 12), Values = wind.data@data$values, Station = station)
wind.data <- wind.data[, "1961-04"]
station <- rep(row.names(wind.data@sp),  30)
wind.frame <- data.frame(Time = rep(1:30, , each= 12), Values = wind.data@data$values, Station = station)
head(wind.frame)
head(economics)
df <- economics %>% select(date,psavert,uempmed)%>%
gather(key="variable",value="value",-date)
head(df,3)
ggplot(df,aes(x=date,y=value))+geom_line(aes(color=variable),size=1)
setwd('C:/Users/Coach/Google Drive/Spatial Final Project')
library(rgdal)
library(maptools)
library(ggplot2)
library(plyr)
library(sp)
library(spatstat)
library(spdep)
county.data <- readShapePoly("CountyDemographics.shp")
setwd("C:/Users/Coach/Google Drive/Spatial Final Project")
county.data <- readShapePoly("CountyDemographics.shp")
setwd("C:/Users/Coach/Google Drive/Spatial Final Project/Data")
county.data <- readShapePoly("CountyDemographics.shp")
setwd("C:/Users/Coach/Google Drive/Spatial Final Project")
percwhite <- county.data@data$perc_white
#Style W is Row Normalized Resampling Assumptions
W <- nb2listw(nlist.queen,style="W")
nlist.queen <- poly2nb(county.data, row.names=as.character(county.data@data$SP_ID), queen=T)
#Style W is Row Normalized Resampling Assumptions
W <- nb2listw(nlist.queen,style="W")
percwhiteI <- localmoran(percwhite,W)
percwhite
percwhiteI
percwhiteI <- localmoran(percwhite,W)[,1]
percwhiteI
percwhiteI <- localmoran(percwhite,W)
View(percwhiteI)
percwhiteI <- localmoran(percwhite,W)[,1]
percwhiteI_pval <- localmoran(percwhite,W)[,5]
county.data@data$percwhiteI <- percwhiteI
county.data@data$percwhiteI_pval <- percwhiteI_pval
spplot(county.data,"percwhiteI")
spplot(county.data,"percwhiteI_pval")
percwhiteImat <- localmoran(percwhite,W)
View(percwhiteImat)
x <- percwhiteImat[,1]-percwhiteImat[,2]
x <- x/(sqrt(percwhiteImat[,3]))
x-percwhiteImat[,4]
county.data@data$percwhiteI_pvalFlag <- ifelse(county.data@data$percwhiteI_pval < 0.05,1,0)
spplot(county.data,"percwhiteI_pvalFlag")
percblack <- county.data@data$perc_black
county.data@data$percblackImat <- localmoran(percblack,W)
county.data@data$percblackI <- county.data@data$percblackImat[,1]
county.data@data$percblack_pval <- county.data@data$percblackImat[,5]
county.data@data$percblack_pvalFlag <- ifelse(county.data@data$percblackI_pval < 0.05,1,0)
county.data@data$percblack_pvalFlag <- ifelse(county.data@data$percblack_pval < 0.05,1,0)
spplot(county.data,"percblackI")
spplot(county.data,"percblackI_pvalFlag")
spplot(county.data,"percblack_pvalFlag")
county.data@data$percRep <- county.data@data$CongRep/county.data@data$Votes
county.data@data$percDem <- county.data@data$CongDem/county.data@data$Votes
county.data@data$percInd <- county.data@data$CongInd/county.data@data$Votes
percRep <- county.data@data$percRep
RepMoran <- localmoran(percRep,W)
percDem <- county.data@data$percDem
DemMoran <- localmoran(percDem,W)
percInd <- county.data@data$percInd
IndMoran <- localmoran(percInd,W)
str(county.data)
View(county.data)
polys <- county.data
polys@data <- as.data.frame(RepMoran)
polys@data <- RepMoran
colnames(RepMoran) <- c("I","EI","VarI","Zi","Pval")
polys@data <- RepMoran
RepMoran <- as.matrix(localmoran(percRep,W))
colnames(RepMoran) <- c("I","EI","VarI","Zi","Pval")
polys@data <- RepMoran
RepMoran <- as.matrix(localmoran(percRep,W))
polys@data <- as.data.frame(RepMoran)
RepMoran <- as.data.frame(localmoran(percRep,W))
colnames(RepMoran) <- c("I","EI","VarI","Zi","Pval")
polys@data <- RepMoran
Rep <- county.data
Rep@data <- RepMoran
Rep@data$PvalFlag <- ifelse(Rep@data$Pval < .05, 1,0)
spplot(Rep,"I")
spplot(Rep,"PvalFlag")
DemMoran <- as.data.frame(localmoran(percDem,W))
Dem <- county.data
colnames(DemMoran) <- c("I","EI","VarI","Zi","Pval")
Dem@data <- DemMoran
Dem@data$PvalFlag <- ifelse(Dem@data$Pval<.05,1,0)
spplot(Dem,"I")
spplot(Dem,"PvalFlag")
IndMoran <- as.data.frame(localmoran(percInd,W))
colnames(IndMoran) <- c("I","EI","VarI","Zi","Pval")
Ind <- county.data
Ind@data <- IndMoran
Ind@data$PvalFlag <- ifelse(Ind@data$Pval <0.05,1,0)
spplot(Ind,"I")
spplot(Ind,"PvalFlag")
spplot(Ind,"I", title="Independents I Test")
spplot(Ind,"I", main="Independents I Test")
spplot(Ind,"PvalFlag",main="Independents AutoCorrelation")
spplot(Dem,"I",main="Democratic I Tests")
spplot(Dem,"PvalFlag", main="Democratic Autocorrelation")
spplot(Rep,"I", main="Republican I Tests")
spplot(Rep,"PvalFlag",main="Republican Autocorrelation")
spplot(county.data,"MeanIncome")
setwd("C:/Users/Coach/Google Drive/Spatial Final Project/Final Project R Code")
spplot(Rep,"PvalFlag",main="Republican Autocorrelation")
spplot(Dem,"PvalFlag", main="Democratic Autocorrelation")
spplot(county.data,"percDem")
Dem@data <- county.data@data$percDem
Dem@data$percDem <- county.data@data$percDem
Ind@data$percInd <- county.data@data$percInd
Rep@data$percRep <- county.data@data$percRep
par(mfrow=c(2,1))
spplot(Rep,"PvalFlag",main="Republican Autocorrelation")
spplot(Rep,"percRep",main="Republican Vote Share")
par(mfrow=c(2,1))
spplot(Rep,"PvalFlag",main="Republican Vote Share Autocorrelation")
spplot(Rep,"percRep",main="Republican Vote Share")
install.packages("gridExtra")
library("gridExtra", lib.loc="~/R/win-library/3.4")
Repplot1 <- spplot(Rep,"PvalFlag",main="Republican Vote Share Autocorrelation")
Repplot2 <- spplot(Rep,"percRep",main="Republican Vote Share")
plots <- list(Repplot1,Repplot2)
do.call(grid.arrange,plots)
grid.arrange(plots,nrow=1)
do.call(grid.arrange(nrow=1),plots)
do.call(grid.arrange,plots,nrow=1)
do.call(grid.arrange,c(plots,nrow=1))
Rep.q <- sp.correlogram(nlist.queen,Rep@data$percRep,order=5,method="I",style="W",randomisation = T)
plot(Rep.q)
plot(Rep.q)
Mor.q <- sp.correlogram(nlist.queen, county.data@data$perc_white+county.data@data$perc_india,order=5,method="I",style="W",randomisation = TRUE)
plot(Mor.q)
par(mfrow=c(1,1))
plot(Rep.q)
do.call(grid.arrange,c(plots,nrow=1))
